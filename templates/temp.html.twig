
var timeFormat = 'YYYY-MM-DD h:mm a';
var bubble_chart = new Chart(document.getElementById("bubble_chart"), {
type: 'bubble',
data: {
datasets: [
{
label: "renderHomepage",
data:
[{
x: moment("2018-09-28 05").format(timeFormat),
y: 1,
r: 3 + 10*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage() {",
"",
"        // PSEUDOCODE",
"        // 1. Parse dataset.csv into a structure we can use",
"        // 2. Tokenize Input.txt and generate an AST",
"        // 3. Evaluate AST and generate the javascript + html for each individual chart",
"        // 4. Group chart html if applicable",
"        // 5. Return HTML and javascript back to index.php",
"",
"        return $this-&gt;render(&#039;base.html.twig&#039;);",
"    }",
],
size: "10",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-09-28 05").format(timeFormat),
y: 1,
r: 3 + 12*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage() {",
"",
"        // 1. Parse dataset.csv into a structure we can use",
"        $dataset_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ). &#039;Input/movies_2011.csv&#039;;",
"        $dataset = $this-&gt;get(&#039;serializer&#039;)-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        // 2. Tokenize Input.txt and generate an AST",
"        // 3. Evaluate AST and generate the javascript + html for each individual chart",
"        // 4. Group chart html if applicable",
"        // 5. Return HTML and javascript back to index.php",
"",
"        return $this-&gt;render(&#039;base.html.twig&#039;);",
"    }",
],
size: "12",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-09-28 05").format(timeFormat),
y: 1,
r: 3 + 19*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"",
"        // 1. Parse dataset into a structure we can use",
"        $dataset_path = $input_path . &#039;movies_2011.csv&#039;;",
"        $dataset = $this-&gt;get(&#039;serializer&#039;)-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        // 2. Tokenize Input.txt and generate an AST",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $ast = $tokenizer-&gt;generateAST($tokens);",
"",
"        // 3. Evaluate AST and generate the javascript + html for each individual chart",
"        // 4. Group chart html if applicable",
"        // 5. Return HTML and javascript back to index.php",
"",
"        return $this-&gt;render(&#039;base.html.twig&#039;);",
"    }",
],
size: "19",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-09-28 08").format(timeFormat),
y: 1,
r: 3 + 19*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"",
"        // 1. Parse dataset into a structure we can use",
"        $dataset_path = $input_path . &#039;movies_2011.csv&#039;;",
"        $dataset = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        // 2. Tokenize Input.txt and generate an AST",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $ast = $tokenizer-&gt;generateAST($tokens);",
"",
"        // 3. Evaluate AST and generate the javascript + html for each individual chart",
"        // 4. Group chart html if applicable",
"        // 5. Return HTML and javascript back to index.php",
"",
"        return $this-&gt;render(&#039;base.html.twig&#039;);",
"    }",
],
size: "19",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 1,
r: 3 + 47*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"",
"        /** 1. Parse dataset into a structure we can use **/",
"        $dataset_path = $input_path . &#039;movies_2011.csv&#039;;",
"        $dataset = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        /** 2. Tokenize Input.txt and generate an AST **/",
"        // 2a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"",
"        // 2b. generate AST",
"        $nodes = [];",
"        while ($token_manager-&gt;hasNextToken()) {",
"",
"            if ($token_manager-&gt;getAndCheckNextToken(&#039;Create&#039;)) {",
"",
"                $node = null;",
"                $next_token = $token_manager-&gt;getNextToken();",
"                switch ($next_token) {",
"                    case &#039;Bar&#039;:",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"                        break;",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($token_manager);",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;&quot;);",
"            }",
"        }",
"",
"        /** 3. Evaluate AST and generate the javascript + html for each individual chart **/",
"        /** 4. Group chart html if applicable **/",
"        /** 5. Return HTML and javascript back to index.php **/",
"",
"        return $this-&gt;render(&#039;base.html.twig&#039;);",
"    }",
],
size: "47",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 1,
r: 3 + 47*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"",
"        /** 1. Parse dataset into a structure we can use **/",
"        $dataset_path = $input_path . &#039;movies_2011.csv&#039;;",
"        $dataset = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        /** 2. Tokenize Input.txt and generate an AST **/",
"        // 2a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"",
"        // 2b. generate AST",
"        $nodes = [];",
"        while ($token_manager-&gt;hasNextToken()) {",
"",
"            if ($token_manager-&gt;getAndCheckNextToken(Node::NODE_START_TOKEN)) {",
"",
"                $node = null;",
"                $next_token = $token_manager-&gt;getNextToken();",
"                switch ($next_token) {",
"                    case &#039;Bar&#039;:",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"                        break;",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($token_manager);",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;&quot;);",
"            }",
"        }",
"",
"        /** 3. Evaluate AST and generate the javascript + html for each individual chart **/",
"        /** 4. Group chart html if applicable **/",
"        /** 5. Return HTML and javascript back to index.php **/",
"",
"        return $this-&gt;render(&#039;base.html.twig&#039;);",
"    }",
],
size: "47",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-09-28 10").format(timeFormat),
y: 1,
r: 3 + 54*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"",
"        /** 1. Parse dataset into a structure we can use **/",
"        $dataset_path = $input_path . &#039;movies_2011.csv&#039;;",
"        $dataset = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        /** 2. Tokenize Input.txt and generate an AST **/",
"        // 2a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"",
"        // 2b. generate nodes of the AST",
"        $nodes = [];",
"        while ($token_manager-&gt;hasNextToken()) {",
"",
"            if ($token_manager-&gt;getAndCheckNextToken(Node::NODE_START_TOKEN)) {",
"",
"                $node = null;",
"                $next_token = $token_manager-&gt;getNextToken();",
"                switch ($next_token) {",
"                    case &#039;Bar&#039;:",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"                        break;",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($token_manager);",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;)&quot;);",
"            }",
"        }",
"",
"        /** 3. Evaluate AST and generate the javascript + html for each individual chart **/",
"        // todo: ensure title uniqueness",
"",
"        /** 4. Arrange Charts in ChartGroups, if applicable **/",
"        /** 5. Return HTML and javascript back to index.php **/",
"",
"        $nodes_json = [];",
"        foreach ($nodes as $node) {",
"            $nodes_json[] = json_encode($node);",
"        }",
"        return $this-&gt;render(&#039;base.html.twig&#039;,",
"            [&#039;nodes&#039; =&gt; $nodes,]);",
"    }",
],
size: "54",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-01 06").format(timeFormat),
y: 1,
r: 3 + 61*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"",
"        /** 1. Parse dataset into a structure we can use **/",
"        $dataset_path = $input_path . &#039;movies_2011.csv&#039;;",
"        $dataset = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        /** 2. Tokenize Input.txt and generate an AST **/",
"        // 2a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"",
"        // 2b. generate nodes of the AST",
"        $nodes = [];",
"        while ($token_manager-&gt;hasNextToken()) {",
"",
"            if ($token_manager-&gt;getAndCheckNextToken(Node::NODE_START_TOKEN)) {",
"",
"                $node = null;",
"                $next_token = $token_manager-&gt;getNextToken();",
"                switch ($next_token) {",
"                    case &#039;Bar&#039;:",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"                        break;",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($token_manager);",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;)&quot;);",
"            }",
"        }",
"",
"        /** 3. Evaluate AST and generate the javascript + html for each individual chart **/",
"        // todo: ensure title uniqueness",
"",
"        /** 4. Arrange Charts in ChartGroups, if applicable **/",
"        /** 5. Return HTML and javascript back to index.php **/",
"",
"        $charts = [];",
"        $groups = [];",
"        foreach ($nodes as $node) {",
"            if ($node-&gt;getType() == Node::TYPE_CHART_GROUP) {",
"                $groups[] = $node;",
"            } else {",
"                $charts[] = $node;",
"            }",
"        }",
"",
"        return $this-&gt;render(&#039;base.html.twig&#039;,",
"            [&#039;charts&#039; =&gt; $charts,",
"             &#039;groups&#039; =&gt; $groups]);",
"    }",
],
size: "61",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-01 08").format(timeFormat),
y: 1,
r: 3 + 30*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"",
"        /** 1. Parse dataset into a structure we can use **/",
"        $dataset_path = $input_path . &#039;movies_2011.csv&#039;;",
"        $dataset = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        /** 2. Tokenize Input.txt and generate an AST **/",
"        // 2a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"",
"        // 2b. generate nodes of the AST",
"        $nodes = $this-&gt;generateNodes($token_manager);",
"",
"        /** 3. Evaluate each node with the provided dataset **/",
"        // todo: ensure title uniqueness",
"",
"        /** 4. Arrange Charts in ChartGroups, if applicable **/",
"        // todo: this is done in base.html.twig, and may require making a .js file",
"",
"        /** 5. Render the page with the evaluated nodes **/",
"        $charts_and_groups = $this-&gt;separateChartsAndGroups($nodes);",
"",
"        return $this-&gt;render(&#039;base.html.twig&#039;,",
"            [&#039;charts&#039; =&gt; $charts_and_groups[&#039;charts&#039;],",
"             &#039;groups&#039; =&gt; $charts_and_groups[&#039;groups&#039;]]);",
"    }",
],
size: "30",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-02 09").format(timeFormat),
y: 1,
r: 3 + 32*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"",
"        /** 1. Parse dataset into a structure we can use **/",
"        $dataset_path = $input_path . &#039;movies_2011.csv&#039;;",
"        $dataset = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        /** 2. Tokenize Input.txt and generate an AST **/",
"        // 2a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"",
"        // 2b. generate nodes of the AST",
"        $nodes = $this-&gt;generateNodes($token_manager);",
"",
"        /** 3. Evaluate each node with the provided dataset **/",
"        foreach ($nodes as $node) {",
"            $node-&gt;evaluate($dataset);",
"        }",
"",
"        /** 4. Arrange Charts in ChartGroups, if applicable **/",
"        // todo: this is done in base.html.twig, and may require making a .js file",
"",
"        /** 5. Render the page with the evaluated nodes **/",
"        $charts_and_groups = $this-&gt;separateChartsAndGroups($nodes);",
"",
"        return $this-&gt;render(&#039;base.html.twig&#039;,",
"            [&#039;charts&#039; =&gt; $charts_and_groups[&#039;charts&#039;],",
"             &#039;groups&#039; =&gt; $charts_and_groups[&#039;groups&#039;]]);",
"    }",
],
size: "32",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-09 07").format(timeFormat),
y: 1,
r: 3 + 33*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"",
"        // todo: These should be read from a directory",
"        $dataset_names = [&#039;avocado.csv&#039;, &#039;movies_2011.csv&#039;];",
"",
"        foreach ($dataset_names as $dataset_name) {",
"            $dataset_path = $input_path . $dataset_name;",
"",
"            $dataset_id = str_replace(&#039;.csv&#039;, &#039;&#039;, $dataset_name);",
"            $this-&gt;datasets[$dataset_id] = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"        }",
"        $dataset = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        /** 2. Tokenize Input.txt and generate an AST **/",
"        // 2a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"",
"        // 2b. generate nodes of the AST",
"        $nodes = $this-&gt;generateNodes($token_manager);",
"",
"        /** 3. Evaluate each node with the provided dataset **/",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(&#039;&#039;);",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"            $node-&gt;evaluate($dataset);",
"        }",
],
size: "33",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-09 08").format(timeFormat),
y: 1,
r: 3 + 38*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"",
"        // todo: These should be read from a directory",
"        $dataset_names = [&#039;avocado.csv&#039;, &#039;movies_2011.csv&#039;];",
"",
"//        foreach ($dataset_names as $dataset_name) {",
"//            $dataset_path = $input_path . $dataset_name;",
"//",
"//            $dataset_id = str_replace(&#039;.csv&#039;, &#039;&#039;, $dataset_name);",
"//            $this-&gt;datasets[$dataset_id] = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"//        }",
"        $dataset = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"",
"        /** 2. Tokenize Input.txt and generate an AST **/",
"        // 2a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"",
"        $nodes = $this-&gt;generateNodes($token_manager, $serializer);",
"        $nodes = $this-&gt;generateNodes($token_manager);",
"",
"        // 3a. evaluate datasets",
"        $datasets_entity = array_shift($nodes);",
"        $this-&gt;datasets = $datasets_entity-&gt;evaluate(null);",
"",
"        // 3b. evaluate everything else",
"        /** 3. Evaluate each node with the provided dataset **/",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(&#039;&#039;);",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"            $node-&gt;evaluate($dataset);",
"        }",
],
size: "38",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-09 08").format(timeFormat),
y: 1,
r: 3 + 26*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderHomepage(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $input_path = str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"        /** 1. Tokenize Input.txt and generate an AST **/",
"        // 1a. generate tokens",
"        // 2a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"        // 1b. generate nodes of the AST",
"        $nodes = $this-&gt;generateNodes($token_manager, $serializer);",
"        $nodes = $this-&gt;generateNodes($token_manager);",
"        /** 2. Parse datasets into a key-value arrays **/",
"        $datasets_entity = array_shift($nodes);",
"        $this-&gt;datasets = $datasets_entity-&gt;evaluate(null);",
"",
"        /** 3. Evaluate charts and chart groups **/",
"        /** 3. Evaluate each node with the provided dataset **/",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(null);",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"            $node-&gt;evaluate($dataset);",
"        }",
],
size: "26",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-10 06").format(timeFormat),
y: 1,
r: 3 + 38*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"        // todo: These should be read from a directory",
"        $dataset_names = [&#039;avocado.csv&#039;, &#039;movies_2011.csv&#039;];",
"",
"        foreach ($dataset_names as $dataset_name) {",
"            $dataset_path = $input_path . $dataset_name;",
"",
"            $dataset_id = str_replace(&#039;.csv&#039;, &#039;&#039;, $dataset_name);",
"            $this-&gt;datasets[$dataset_id] = $serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"        }",
"        /** 1. Tokenize Input.txt and generate an AST **/",
"        // 1a. generate tokens",
"        // 2a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"        // 1b. generate nodes of the AST",
"        $nodes = $this-&gt;generateNodes($token_manager, $serializer);",
"        $nodes = $this-&gt;generateNodes($token_manager);",
"        /** 2. Parse datasets into a key-value arrays **/",
"        $datasets_entity = array_shift($nodes);",
"        $this-&gt;datasets = $datasets_entity-&gt;evaluate(null);",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(null);",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"        /** 3. Evaluate charts and chart groups **/",
"        /** 3. Evaluate each node with the provided dataset **/",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(null);",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"            $node-&gt;evaluate($dataset);",
"        }",
],
size: "38",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-10 06").format(timeFormat),
y: 1,
r: 3 + 31*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"        /** 1. Tokenize Input.txt and generate an AST **/",
"        // 1a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"        // 1b. generate nodes of the AST",
"        // 1b. generate nodes of the AST",
"        $nodes = $this-&gt;generateNodes($token_manager, $serializer);",
"        /** 2. Parse datasets into a key-value arrays **/",
"        /** 2. Parse datasets into a key-value arrays **/",
"        $datasets_entity = array_shift($nodes);",
"        $this-&gt;datasets = $datasets_entity-&gt;evaluate(null);",
"",
"        /** 3. Evaluate charts and chart groups **/",
"        $this-&gt;datasets = $datasets_entity-&gt;evaluate(null);",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(null);",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"        /** 3. Evaluate charts and chart groups **/",
"        /** 3. Evaluate each node with the provided dataset **/",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(null);",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"            $node-&gt;evaluate($dataset);",
],
size: "31",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-11 06").format(timeFormat),
y: 1,
r: 3 + 38*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"        /** 1. Tokenize Input.txt and generate an AST **/",
"        // 1a. generate tokens",
"        $dsl_input_path = $input_path . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"        // 1b. generate nodes of the AST",
"        // 1b. generate nodes of the AST",
"        $nodes = $this-&gt;generateNodes($token_manager, $serializer);",
"",
"        /** 2. Parse datasets into a key-value arrays **/",
"        $datasets_entity = array_shift($nodes);",
"        $this-&gt;datasets = $datasets_entity-&gt;evaluate(null);",
"        /** 2. Parse datasets into a key-value arrays **/",
"        /** 3. Evaluate charts and chart groups **/",
"        $datasets_entity = array_shift($nodes);",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(null);",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"",
"        /** 3. Evaluate charts and chart groups **/",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"        /** 3. Evaluate charts and chart groups **/",
"        /** 3. Evaluate each node with the provided dataset **/",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(null);",
"    private function generateNodes(TokenManager $token_manager, $serializer) {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"            $node = null;",
"            $node-&gt;evaluate($dataset);",
],
size: "38",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-12 08").format(timeFormat),
y: 1,
r: 3 + 38*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"        /** 1. Tokenize Input.txt and generate an AST **/",
"        // 1a. generate tokens",
"        $dsl_input_path = $this-&gt;getInputPath() . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"        // 1b. generate nodes of the AST",
"        // 1b. generate nodes of the AST",
"        $nodes = $this-&gt;generateNodes($token_manager, $serializer);",
"",
"        /** 2. Parse datasets into a key-value arrays **/",
"        $datasets_entity = array_shift($nodes);",
"        $this-&gt;datasets = $datasets_entity-&gt;evaluate(null);",
"        /** 2. Parse datasets into a key-value arrays **/",
"        /** 3. Evaluate charts and chart groups **/",
"        $datasets_entity = array_shift($nodes);",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(null);",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"",
"        /** 3. Evaluate charts and chart groups **/",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"        /** 3. Evaluate charts and chart groups **/",
"        /** 3. Evaluate each node with the provided dataset **/",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(null);",
"    private function generateNodes(TokenManager $token_manager, $serializer) {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"            $node = null;",
"            $node-&gt;evaluate($dataset);",
],
size: "38",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-12 11").format(timeFormat),
y: 1,
r: 3 + 32*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"            [&#039;datasets&#039; =&gt; $filenames,",
"             &#039;program&#039; =&gt; $program]);",
"        /** 1. Tokenize Input.txt and generate an AST **/",
"        // 1a. generate tokens",
"        $dsl_input_path = $this-&gt;getInputPath() . &#039;input.txt&#039;;",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"    public function renderCharts(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $this-&gt;datasets = $datasets_entity-&gt;evaluate(null);",
"        $tokens = $tokenizer-&gt;generateTokens($this-&gt;getProgramString());",
"        $token_manager = new TokenManager($tokens, $serializer);",
"        $datasets_entity = array_shift($nodes);",
"        $nodes = $token_manager-&gt;generateNodes();",
"            } else {",
"                $node-&gt;evaluate($dataset);",
"            }",
"",
"            } else {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"        /** 3. Evaluate charts and chart groups **/",
"        /** 3. Evaluate each node with the provided dataset **/",
"            if ($node instanceof ChartGroup) {",
"                $node-&gt;evaluate(null);",
"    private function generateNodes(TokenManager $token_manager, $serializer) {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
"            $node = null;",
"            $node-&gt;evaluate($dataset);",
],
size: "32",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-13 12").format(timeFormat),
y: 1,
r: 3 + 10*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"            [&#039;datasets&#039; =&gt; $filenames,",
"             &#039;program&#039; =&gt; $program]);",
"        /** 1. Tokenize Input.txt and generate an AST **/",
"        // 1a. generate tokens",
"        $dsl_input_string = file_get_contents($dsl_input_path);",
"",
"        $tokens = $tokenizer-&gt;generateTokens($dsl_input_string);",
"        $token_manager = new TokenManager($tokens);",
"    public function renderCharts(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $this-&gt;datasets = $datasets_entity-&gt;evaluate(null);",
"        $tokens = $tokenizer-&gt;generateTokens($this-&gt;getProgramString());",
],
size: "10",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderHomepage",
data:
[{
x: moment("2018-10-14 12").format(timeFormat),
y: 1,
r: 3 + 0*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
],
size: "0",
fileName: "src/Controller/BaseController.php"
},
{
label: "generateNodes",
data:
[{
x: moment("2018-10-01 08").format(timeFormat),
y: 2,
r: 3 + 28*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    private function generateNodes(TokenManager $token_manager) {",
"        $nodes = [];",
"        while ($token_manager-&gt;hasNextToken()) {",
"",
"            if ($token_manager-&gt;getAndCheckNextToken(Node::NODE_START_TOKEN)) {",
"",
"                $node = null;",
"                $next_token = $token_manager-&gt;getNextToken();",
"                switch ($next_token) {",
"                    case &#039;Bar&#039;:",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"                        break;",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($token_manager);",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;)&quot;);",
"            }",
"        }",
"",
"        return $nodes;",
"    }",
],
size: "28",
fileName: "src/Controller/BaseController.php"
},
{
label: "generateNodes",
data:
[{
x: moment("2018-10-03 06").format(timeFormat),
y: 2,
r: 3 + 31*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    private function generateNodes(TokenManager $token_manager) {",
"        $nodes = [];",
"        while ($token_manager-&gt;hasNextToken()) {",
"",
"            if ($token_manager-&gt;getAndCheckNextToken(Node::NODE_START_TOKEN)) {",
"",
"                $node = null;",
"                $next_token = $token_manager-&gt;getNextToken();",
"                switch ($next_token) {",
"                    case &#039;Bar&#039;:",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                        break;",
"                    case &#039;Pie&#039;:",
"                        $node = new PieChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"                        break;",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($token_manager);",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;)&quot;);",
"            }",
"        }",
"",
"        return $nodes;",
"    }",
],
size: "31",
fileName: "src/Controller/BaseController.php"
},
{
label: "generateNodes",
data:
[{
x: moment("2018-10-07 08").format(timeFormat),
y: 2,
r: 3 + 34*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    private function generateNodes(TokenManager $token_manager) {",
"        $nodes = [];",
"        while ($token_manager-&gt;hasNextToken()) {",
"",
"            if ($token_manager-&gt;getAndCheckNextToken(Node::NODE_START_TOKEN)) {",
"",
"                $node = null;",
"                $next_token = $token_manager-&gt;getNextToken();",
"                switch ($next_token) {",
"                    case &#039;Bar&#039;:",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                    case &#039;Pie&#039;:",
"                        $node = new PieChart();",
"                        break;",
"                        break;",
"                    case &#039;Pie&#039;:",
"                        $node = new PieChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"                        break;",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($token_manager);",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;)&quot;);",
"            }",
"        }",
"",
"        return $nodes;",
"    }",
],
size: "34",
fileName: "src/Controller/BaseController.php"
},
{
label: "generateNodes",
data:
[{
x: moment("2018-10-09 08").format(timeFormat),
y: 2,
r: 3 + 39*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    private function generateNodes(TokenManager $token_manager, $serializer) {",
"    private function generateNodes(TokenManager $token_manager) {",
"        $nodes = [];",
"        while ($token_manager-&gt;hasNextToken()) {",
"            $node = null;",
"",
"            if ($token_manager-&gt;getAndCheckNextToken(Node::NODE_START_TOKEN)) {",
"                $node = null;",
"                $next_token = $token_manager-&gt;getNextToken();",
"                    case &#039;Datasets&#039;:",
"                        $node = new Datasets($serializer);",
"                        break;",
"                switch ($next_token) {",
"                    case &#039;Bar&#039;:",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                    case &#039;Pie&#039;:",
"                        $node = new PieChart();",
"                        break;",
"                        break;",
"                    case &#039;Pie&#039;:",
"                        $node = new PieChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"                        break;",
"",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($token_manager);",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;)&quot;);",
"            }",
"        }",
"",
"        return $nodes;",
"    }",
],
size: "39",
fileName: "src/Controller/BaseController.php"
},
{
label: "generateNodes",
data:
[{
x: moment("2018-10-10 06").format(timeFormat),
y: 2,
r: 3 + 43*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    private function generateNodes(TokenManager $token_manager, $serializer) {",
"    private function generateNodes(TokenManager $token_manager) {",
"        $nodes = [];",
"        while ($token_manager-&gt;hasNextToken()) {",
"            $node = null;",
"    private function generateNodes(TokenManager $token_manager, $serializer) {",
"            if ($token_manager-&gt;getAndCheckNextToken(Node::NODE_START_TOKEN)) {",
"                $node = null;",
"                $next_token = $token_manager-&gt;getNextToken();",
"            $node = null;",
"                    case &#039;Datasets&#039;:",
"                        $node = new Datasets($serializer);",
"                switch ($next_token) {",
"                    case &#039;Bar&#039;:",
"                    case &#039;Datasets&#039;:",
"                        $node = new Datasets($serializer);",
"                        break;",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                    case &#039;Pie&#039;:",
"                        $node = new PieChart();",
"                        break;",
"                        break;",
"                    case &#039;Pie&#039;:",
"                        $node = new PieChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"",
"                        break;",
"",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($token_manager);",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;)&quot;);",
"            }",
"        }",
"",
"        return $nodes;",
"    }",
],
size: "43",
fileName: "src/Controller/BaseController.php"
},
{
label: "generateNodes",
data:
[{
x: moment("2018-10-11 06").format(timeFormat),
y: 2,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    private function generateNodes(TokenManager $token_manager, $serializer) {",
"                $dataset = $this-&gt;datasets[$node-&gt;getDatasetId()];",
"                $node-&gt;evaluate($dataset);",
"            }",
],
size: "3",
fileName: "src/Controller/BaseController.php"
},
{
label: "generateNodes",
data:
[{
x: moment("2018-10-13 12").format(timeFormat),
y: 2,
r: 3 + 0*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
],
size: "0",
fileName: "src/Controller/BaseController.php"
},
{
label: "separateChartsAndGroups",
data:
[{
x: moment("2018-10-01 08").format(timeFormat),
y: 3,
r: 3 + 11*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    private function separateChartsAndGroups($nodes) {",
"        $charts_and_groups = [];",
"        foreach ($nodes as $node) {",
"            if ($node-&gt;getType() == Node::TYPE_CHART_GROUP) {",
"                $charts_and_groups[&#039;groups&#039;][] = $node;",
"            } else {",
"                $charts_and_groups[&#039;charts&#039;][] = $node;",
"            }",
"        }",
"",
"        return $charts_and_groups;",
"    }",
],
size: "11",
fileName: "src/Controller/BaseController.php"
},
{
label: "separateChartsAndGroups",
data:
[{
x: moment("2018-10-13 12").format(timeFormat),
y: 3,
r: 3 + 20*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    private function separateChartsAndGroups($nodes) {",
"        $charts_and_groups = [];",
"        foreach ($nodes as $node) {",
"            if ($node-&gt;getType() == Node::TYPE_CHART_GROUP) {",
"                $charts_and_groups[&#039;groups&#039;][] = $node;",
"            } else {",
"",
"    private function getInputPath() {",
"        return str_replace(&#039;Controller&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"    }",
"",
"    private function getProgramString() {",
"        $dsl_input_path = $this-&gt;getInputPath() . &#039;input.txt&#039;;",
"        return file_get_contents($dsl_input_path);",
"    }",
"                $charts_and_groups[&#039;charts&#039;][] = $node;",
"            }",
"        }",
"",
"        return $charts_and_groups;",
"    }",
],
size: "20",
fileName: "src/Controller/BaseController.php"
},
{
label: "separateChartsAndGroups",
data:
[{
x: moment("2018-10-14 04").format(timeFormat),
y: 3,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"        }",
"",
"        return $charts_and_groups;",
"    }",
],
size: "3",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderCharts",
data:
[{
x: moment("2018-10-12 11").format(timeFormat),
y: 4,
r: 3 + 8*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
"    public function renderCharts(SerializerInterface $serializer, Tokenizer $tokenizer) {",
"        $this-&gt;datasets = $datasets_entity-&gt;evaluate(null);",
"        $tokens = $tokenizer-&gt;generateTokens($this-&gt;getProgramString());",
"        $token_manager = new TokenManager($tokens, $serializer);",
"        $datasets_entity = array_shift($nodes);",
"        $nodes = $token_manager-&gt;generateNodes();",
"            } else {",
"                $node-&gt;evaluate($dataset);",
"            }",
],
size: "8",
fileName: "src/Controller/BaseController.php"
},
{
label: "renderCharts",
data:
[{
x: moment("2018-10-14 12").format(timeFormat),
y: 4,
r: 3 + 0*0.05
}],
fill:false,
borderColor:"rgb(52,151,20)",
backgroundColor:"rgba(52,151,20,0.4)",
body:
[
],
size: "0",
fileName: "src/Controller/BaseController.php"
},
{
label: "getCacheDir",
data:
[{
x: moment("2018-09-28 05").format(timeFormat),
y: 5,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(109,83,205)",
backgroundColor:"rgba(109,83,205,0.4)",
body:
[
"    public function getCacheDir()",
"    {",
"        return $this-&gt;getProjectDir().&#039;/var/cache/&#039;.$this-&gt;environment;",
"    }",
],
size: "3",
fileName: "src/Kernel.php"
},
{
label: "getLogDir",
data:
[{
x: moment("2018-09-28 05").format(timeFormat),
y: 6,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(109,83,205)",
backgroundColor:"rgba(109,83,205,0.4)",
body:
[
"    public function getLogDir()",
"    {",
"        return $this-&gt;getProjectDir().&#039;/var/log&#039;;",
"    }",
],
size: "3",
fileName: "src/Kernel.php"
},
{
label: "registerBundles",
data:
[{
x: moment("2018-09-28 05").format(timeFormat),
y: 7,
r: 3 + 8*0.05
}],
fill:false,
borderColor:"rgb(109,83,205)",
backgroundColor:"rgba(109,83,205,0.4)",
body:
[
"    public function registerBundles()",
"    {",
"        $contents = require $this-&gt;getProjectDir().&#039;/config/bundles.php&#039;;",
"        foreach ($contents as $class =&gt; $envs) {",
"            if (isset($envs[&#039;all&#039;]) || isset($envs[$this-&gt;environment])) {",
"                yield new $class();",
"            }",
"        }",
"    }",
],
size: "8",
fileName: "src/Kernel.php"
},
{
label: "configureContainer",
data:
[{
x: moment("2018-09-28 05").format(timeFormat),
y: 8,
r: 3 + 13*0.05
}],
fill:false,
borderColor:"rgb(109,83,205)",
backgroundColor:"rgba(109,83,205,0.4)",
body:
[
"    protected function configureContainer(ContainerBuilder $container, LoaderInterface $loader)",
"    {",
"        $container-&gt;addResource(new FileResource($this-&gt;getProjectDir().&#039;/config/bundles.php&#039;));",
"        // Feel free to remove the &quot;container.autowiring.strict_mode&quot; parameter",
"        // if you are using symfony/dependency-injection 4.0+ as it&#039;s the default behavior",
"        $container-&gt;setParameter(&#039;container.autowiring.strict_mode&#039;, true);",
"        $container-&gt;setParameter(&#039;container.dumper.inline_class_loader&#039;, true);",
"        $confDir = $this-&gt;getProjectDir().&#039;/config&#039;;",
"",
"        $loader-&gt;load($confDir.&#039;/{packages}/*&#039;.self::CONFIG_EXTS, &#039;glob&#039;);",
"        $loader-&gt;load($confDir.&#039;/{packages}/&#039;.$this-&gt;environment.&#039;/**/*&#039;.self::CONFIG_EXTS, &#039;glob&#039;);",
"        $loader-&gt;load($confDir.&#039;/{services}&#039;.self::CONFIG_EXTS, &#039;glob&#039;);",
"        $loader-&gt;load($confDir.&#039;/{services}_&#039;.$this-&gt;environment.self::CONFIG_EXTS, &#039;glob&#039;);",
"    }",
],
size: "13",
fileName: "src/Kernel.php"
},
{
label: "configureRoutes",
data:
[{
x: moment("2018-09-28 05").format(timeFormat),
y: 9,
r: 3 + 7*0.05
}],
fill:false,
borderColor:"rgb(109,83,205)",
backgroundColor:"rgba(109,83,205,0.4)",
body:
[
"    protected function configureRoutes(RouteCollectionBuilder $routes)",
"    {",
"        $confDir = $this-&gt;getProjectDir().&#039;/config&#039;;",
"",
"        $routes-&gt;import($confDir.&#039;/{routes}/*&#039;.self::CONFIG_EXTS, &#039;/&#039;, &#039;glob&#039;);",
"        $routes-&gt;import($confDir.&#039;/{routes}/&#039;.$this-&gt;environment.&#039;/**/*&#039;.self::CONFIG_EXTS, &#039;/&#039;, &#039;glob&#039;);",
"        $routes-&gt;import($confDir.&#039;/{routes}&#039;.self::CONFIG_EXTS, &#039;/&#039;, &#039;glob&#039;);",
"    }",
],
size: "7",
fileName: "src/Kernel.php"
},
{
label: "generateTokens",
data:
[{
x: moment("2018-09-28 05").format(timeFormat),
y: 10,
r: 3 + 8*0.05
}],
fill:false,
borderColor:"rgb(142,232,55)",
backgroundColor:"rgba(142,232,55,0.4)",
body:
[
"    public function generateTokens($input_lines) {",
"",
"        $tokens = [];",
"        foreach ($input_lines as $input_line) {",
"            // Todo: split each line on the LITERALS, add both sides to $tokens",
"        }",
"",
"        return $tokens;",
"    }",
],
size: "8",
fileName: "src/Services/Tokenizer.php"
},
{
label: "generateTokens",
data:
[{
x: moment("2018-09-28 08").format(timeFormat),
y: 10,
r: 3 + 17*0.05
}],
fill:false,
borderColor:"rgb(142,232,55)",
backgroundColor:"rgba(142,232,55,0.4)",
body:
[
"    public function generateTokens($input_lines) {",
"",
"        $token_string = str_replace(&quot;\n&quot;, &quot; &quot;, $input_lines);",
"        foreach (Tokenizer::LITERALS as $literal) {",
"            $token_string = str_replace($literal, &#039;_&#039;.$literal.&#039;_&#039;, $token_string);",
"        }",
"        $tokens = explode(&#039;_&#039;, $token_string);",
"",
"        $cleaned_tokens = [];",
"        foreach ($tokens as $token) {",
"            $cleaned_token = trim(str_replace(&#039;&quot;&#039;, &quot;&quot;, $token));",
"            if (!empty($cleaned_token)) {",
"                $cleaned_tokens[] = $cleaned_token;",
"            }",
"        }",
"",
"        return $cleaned_tokens;",
"    }",
],
size: "17",
fileName: "src/Services/Tokenizer.php"
},
{
label: "generateTokens",
data:
[{
x: moment("2018-10-09 06").format(timeFormat),
y: 10,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(142,232,55)",
backgroundColor:"rgba(142,232,55,0.4)",
body:
[
"    public function generateTokens($input_lines) {",
"            $token_string = str_replace($literal, &#039;_&#039;.$literal.&#039;_&#039;, $token_string);",
"        return $tokens;",
"    }",
],
size: "3",
fileName: "src/Services/Tokenizer.php"
},
{
label: "generateAST",
data:
[{
x: moment("2018-09-28 05").format(timeFormat),
y: 11,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(142,232,55)",
backgroundColor:"rgba(142,232,55,0.4)",
body:
[
"    public function generateAST($tokens) {",
"        // Todo: complete",
"        return $tokens;",
"    }",
],
size: "3",
fileName: "src/Services/Tokenizer.php"
},
{
label: "generateAST",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 11,
r: 3 + 0*0.05
}],
fill:false,
borderColor:"rgb(142,232,55)",
backgroundColor:"rgba(142,232,55,0.4)",
body:
[
],
size: "0",
fileName: "src/Services/Tokenizer.php"
},
{
label: "generateSubStatementTokens",
data:
[{
x: moment("2018-10-09 06").format(timeFormat),
y: 12,
r: 3 + 32*0.05
}],
fill:false,
borderColor:"rgb(142,232,55)",
backgroundColor:"rgba(142,232,55,0.4)",
body:
[
"    private function generateSubStatementTokens($remaining_input_line, $literal) {",
"        if ($literal == Chart::ONLY_USE_TOKEN) {",
"",
"            $sub_tokens = [];",
"            foreach (self::LOGIC_LITERALS as $sub_literal) {",
"                if (strpos($remaining_input_line, $sub_literal) !== false) {",
"                   $sub_tokens = $this-&gt;separateLiteral($sub_literal, $remaining_input_line);",
"                   continue;",
"                }",
"            }",
"        $tokens = explode(&#039;_&#039;, $token_string);",
"            if (empty($sub_tokens)) {",
"                foreach (self::BASE_LOGIC_LITERALS as $sub_literal) {",
"                    if (strpos($remaining_input_line, $sub_literal) !== false) {",
"                        $sub_tokens = $this-&gt;separateLiteral($sub_literal, $remaining_input_line);",
"                        continue;",
"                    }",
"                }",
"                $cleaned_tokens[] = $cleaned_token;",
"",
"            $return_tokens = [];",
"            foreach ($sub_tokens as $sub_token) {",
"                $return_tokens[] = trim($sub_token);",
"            }",
"",
"            return $return_tokens;",
"        } elseif ($literal == Node::NODE_END_TOKEN) {",
"            return [];",
"        } else {",
"            return [$remaining_input_line];",
"            }",
"    }",
"        }",
],
size: "32",
fileName: "src/Services/Tokenizer.php"
},
{
label: "separateLiteral",
data:
[{
x: moment("2018-10-09 06").format(timeFormat),
y: 13,
r: 3 + 4*0.05
}],
fill:false,
borderColor:"rgb(142,232,55)",
backgroundColor:"rgba(142,232,55,0.4)",
body:
[
"    private function separateLiteral($literal, $input_line) {",
"         $token_string = str_replace($literal, &#039;_&#039;.$literal.&#039;_&#039;, $input_line);",
"         return explode(&#039;_&#039;, $token_string);",
"        return $cleaned_tokens;",
"    }",
],
size: "4",
fileName: "src/Services/Tokenizer.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 14,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate()",
"    {",
"        // TODO: Implement evaluate() method.",
"    }",
],
size: "3",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-02 10").format(timeFormat),
y: 14,
r: 3 + 33*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"",
"            // TODO: add in type-checking regex service",
"            // ASSUME: x are distinct",
"",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"                $data[$x_value][&#039;size&#039;] = 0;",
"            }",
"",
"            ++$data[$x_value][&#039;size&#039;];",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if ($data[$x_value][&#039;x_value&#039;] === &quot;?&quot;)",
"            {",
"                unset($data[$x_value]);",
"            }",
"        }",
"",
"        foreach ($data as $column) {",
"            $this-&gt;data[&#039;x_value&#039;][] = $column[&#039;x_value&#039;];",
"",
"            // divide y_value by size?",
"            $this-&gt;data[&#039;y_value&#039;][] = $column[&#039;y_value&#039;];",
"        }",
"",
"        // temp",
"        return $this-&gt;data;",
"    }",
],
size: "33",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-02 10").format(timeFormat),
y: 14,
r: 3 + 30*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"",
"            // TODO: add in type-checking regex service",
"            // ASSUME: x are distinct",
"",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"                $data[$x_value][&#039;size&#039;] = 0;",
"            }",
"",
"            ++$data[$x_value][&#039;size&#039;];",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if ($data[$x_value][&#039;x_value&#039;] === &quot;?&quot;)",
"            {",
"                unset($data[$x_value]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colour&#039;] = [];",
"        foreach ($data as $column) {",
"            $this-&gt;data[&#039;x_value&#039;][] = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;y_value&#039;][] = $column[&#039;y_value&#039;];",
"            $this-&gt;data[&#039;colour&#039;][] = $this-&gt;getNewColour($this-&gt;data[&#039;colour&#039;]);",
"        }",
"    }",
],
size: "30",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-02 10").format(timeFormat),
y: 14,
r: 3 + 27*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"",
"            // TODO: add in type-checking regex service?",
"",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if ($data[$x_value][&#039;x_value&#039;] === &quot;?&quot;)",
"            {",
"                unset($data[$x_value]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colour&#039;] = [];",
"        foreach ($data as $column) {",
"            $this-&gt;data[&#039;x_value&#039;][] = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;y_value&#039;][] = $column[&#039;y_value&#039;];",
"            $this-&gt;data[&#039;colour&#039;][] = $this-&gt;getNewColour($this-&gt;data[&#039;colour&#039;]);",
"        }",
"    }",
],
size: "27",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-02 11").format(timeFormat),
y: 14,
r: 3 + 20*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_values&#039;] = $x_value;",
"                $data[$x_value][&#039;y_values&#039;] = 0;",
"            }",
"",
"            $data[$x_value][&#039;y_values&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $column) {",
"            $this-&gt;data[&#039;x_values&#039;][] = $column[&#039;x_values&#039;];",
"            $this-&gt;data[&#039;y_values&#039;][] = $column[&#039;y_values&#039;];",
"            $this-&gt;data[&#039;colours&#039;][] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"    }",
],
size: "20",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-02 11").format(timeFormat),
y: 14,
r: 3 + 20*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_values&#039;] = $x_value;",
"                $data[$x_value][&#039;y_values&#039;] = 0;",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            $data[$x_value][&#039;y_values&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $column) {",
"            $this-&gt;data[&#039;x_values&#039;][] = $column[&#039;x_values&#039;];",
"            $this-&gt;data[&#039;y_values&#039;][] = $column[&#039;y_values&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"    }",
],
size: "20",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-03 05").format(timeFormat),
y: 14,
r: 3 + 43*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate($dataset)",
"    // TODO: add in type-checking regex service?",
"    {",
"        $data = [];",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        foreach ($dataset as $row) {",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;data[&#039;colours&#039;][$x_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        if (isset($this-&gt;order)) {",
"            $this-&gt;sortByX();",
"        }",
"",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_values&#039;] = $x_value;",
"                $data[$x_value][&#039;y_values&#039;] = 0;",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            $data[$x_value][&#039;y_values&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $column) {",
"            $this-&gt;data[&#039;x_values&#039;][] = $column[&#039;x_values&#039;];",
"            $this-&gt;data[&#039;y_values&#039;][] = $column[&#039;y_values&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"    }",
],
size: "43",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-07 06").format(timeFormat),
y: 14,
r: 3 + 45*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate($dataset)",
"    // TODO: add in type-checking regex service?",
"    {",
"        $data = [];",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;data[&#039;colours&#039;][$x_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        if (isset($this-&gt;order)) {",
"            $this-&gt;sortByX();",
"        }",
"",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_values&#039;] = $x_value;",
"                $data[$x_value][&#039;y_values&#039;] = 0;",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            $data[$x_value][&#039;y_values&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $column) {",
"            $this-&gt;data[&#039;x_values&#039;][] = $column[&#039;x_values&#039;];",
"            $this-&gt;data[&#039;y_values&#039;][] = $column[&#039;y_values&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"    }",
],
size: "45",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-09 07").format(timeFormat),
y: 14,
r: 3 + 48*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate($dataset)",
"    // TODO: add in type-checking regex service?",
"    {",
"        $data = [];",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;data[&#039;colours&#039;][$x_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        if (isset($this-&gt;order)) {",
"            $this-&gt;sortByX();",
"        }",
"",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_values&#039;] = $x_value;",
"                $data[$x_value][&#039;y_values&#039;] = 0;",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            $data[$x_value][&#039;y_values&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $column) {",
"            $this-&gt;data[&#039;x_values&#039;][] = $column[&#039;x_values&#039;];",
"            $this-&gt;data[&#039;y_values&#039;][] = $column[&#039;y_values&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"    }",
],
size: "48",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-10 06").format(timeFormat),
y: 14,
r: 3 + 18*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate($dataset)",
"    // TODO: add in type-checking regex service?",
"    {",
"        $data = [];",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"                }",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            }",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            }",
"        }",
],
size: "18",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-11 06").format(timeFormat),
y: 14,
r: 3 + 20*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function evaluate($dataset)",
"    // TODO: add in type-checking regex service?",
"    {",
"        $data = [];",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"            if ($this-&gt;passesFilter($row)) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            }",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            }",
"        }",
],
size: "20",
fileName: "src/Entities/BarChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 15,
r: 3 + 23*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function addAttribute($token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::X_AXIS_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_AXIS_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;x_order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_ORDER_TOKEN:",
"                $this-&gt;y_order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "23",
fileName: "src/Entities/BarChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-02 11").format(timeFormat),
y: 15,
r: 3 + 20*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::X_AXIS_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_AXIS_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "20",
fileName: "src/Entities/BarChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-03 06").format(timeFormat),
y: 15,
r: 3 + 16*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "16",
fileName: "src/Entities/BarChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-07 08").format(timeFormat),
y: 15,
r: 3 + 14*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"        switch ($token) {",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "14",
fileName: "src/Entities/BarChart.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-10-01 06").format(timeFormat),
y: 16,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    public function __construct()",
"    {",
"        $this-&gt;type = Node::TYPE_LINE_CHART;",
"    }",
],
size: "3",
fileName: "src/Entities/BarChart.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-10-03 05").format(timeFormat),
y: 16,
r: 3 + 2*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    {",
"        $this-&gt;type = Node::TYPE_BAR_CHART;",
"    }",
],
size: "2",
fileName: "src/Entities/BarChart.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-10-14 04").format(timeFormat),
y: 16,
r: 3 + 0*0.05
}],
fill:false,
borderColor:"rgb(215,115,91)",
backgroundColor:"rgba(215,115,91,0.4)",
body:
[
"    }",
],
size: "0",
fileName: "src/Entities/BarChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 17,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(94,198,249)",
backgroundColor:"rgba(94,198,249,0.4)",
body:
[
"    public function evaluate()",
"    {",
"        // TODO: Implement evaluate() method.",
"    }",
],
size: "3",
fileName: "src/Entities/ChartGroup.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 18,
r: 3 + 14*0.05
}],
fill:false,
borderColor:"rgb(94,198,249)",
backgroundColor:"rgba(94,198,249,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::ADD_CHART_TOKEN:",
"                $chart_titles[] = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "14",
fileName: "src/Entities/ChartGroup.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 18,
r: 3 + 17*0.05
}],
fill:false,
borderColor:"rgb(94,198,249)",
backgroundColor:"rgba(94,198,249,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::ADD_CHART_TOKEN:",
"                $this-&gt;chart_titles[] = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ORIENT_TOKEN:",
"                $this-&gt;orientation = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "17",
fileName: "src/Entities/ChartGroup.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-09 08").format(timeFormat),
y: 18,
r: 3 + 17*0.05
}],
fill:false,
borderColor:"rgb(94,198,249)",
backgroundColor:"rgba(94,198,249,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::ADD_CHART_TOKEN:",
"            case self::ADD_ITEM_TOKEN:",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ORIENT_TOKEN:",
"                $this-&gt;orientation = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "17",
fileName: "src/Entities/ChartGroup.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-10 06").format(timeFormat),
y: 18,
r: 3 + 17*0.05
}],
fill:false,
borderColor:"rgb(94,198,249)",
backgroundColor:"rgba(94,198,249,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::ADD_CHART_TOKEN:",
"            case self::ADD_ITEM_TOKEN:",
"            case self::ADD_ITEM_TOKEN:",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ORIENT_TOKEN:",
"                $this-&gt;orientation = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "17",
fileName: "src/Entities/ChartGroup.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-11 06").format(timeFormat),
y: 18,
r: 3 + 17*0.05
}],
fill:false,
borderColor:"rgb(94,198,249)",
backgroundColor:"rgba(94,198,249,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::ADD_CHART_TOKEN:",
"            case self::ADD_ITEM_TOKEN:",
"            case self::ADD_ITEM_TOKEN:",
"            case self::ADD_ITEM_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ORIENT_TOKEN:",
"                $this-&gt;orientation = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "17",
fileName: "src/Entities/ChartGroup.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-10-01 06").format(timeFormat),
y: 19,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(94,198,249)",
backgroundColor:"rgba(94,198,249,0.4)",
body:
[
"    public function __construct()",
"    {",
"        $this-&gt;type = Node::TYPE_CHART_GROUP;",
"    }",
],
size: "3",
fileName: "src/Entities/ChartGroup.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 20,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    public function evaluate()",
"    {",
"        // TODO: Implement evaluate() method.",
"    }",
],
size: "3",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-07 04").format(timeFormat),
y: 20,
r: 3 + 26*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            }",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"        }",
"",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"        }",
"    }",
],
size: "26",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-07 06").format(timeFormat),
y: 20,
r: 3 + 29*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"        }",
"",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"        }",
"    }",
],
size: "29",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-07 07").format(timeFormat),
y: 20,
r: 3 + 50*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
],
size: "50",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-07 08").format(timeFormat),
y: 20,
r: 3 + 112*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "112",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-07 08").format(timeFormat),
y: 20,
r: 3 + 173*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "173",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-07 08").format(timeFormat),
y: 20,
r: 3 + 202*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                $line_value = trim($row[$this-&gt;line]);",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "202",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-09 07").format(timeFormat),
y: 20,
r: 3 + 205*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                $line_value = trim($row[$this-&gt;line]);",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "205",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-10 06").format(timeFormat),
y: 20,
r: 3 + 210*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"                if (!isset($data[$line_value])) {",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "210",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-10 06").format(timeFormat),
y: 20,
r: 3 + 213*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"                if (!isset($data[$line_value])) {",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "213",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-11 06").format(timeFormat),
y: 20,
r: 3 + 282*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"                }",
"                if (!isset($data[$line_value])) {",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "282",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-11 09").format(timeFormat),
y: 20,
r: 3 + 292*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"                $this-&gt;x_label = $this-&gt;x_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;x_label = $token_manager-&gt;getNextToken();",
"                }",
"                }",
"                if (!isset($data[$line_value])) {",
"                if (!isset($data[$line_value][$x_value])) {",
"                $this-&gt;y_label = $this-&gt;y_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;y_label = $token_manager-&gt;getNextToken();",
"                }",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "292",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-12 05").format(timeFormat),
y: 20,
r: 3 + 295*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"                $this-&gt;x_label = $this-&gt;x_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;x_label = $token_manager-&gt;getNextToken();",
"                }",
"                }",
"                if (!isset($data[$line_value])) {",
"                if (!isset($data[$line_value][$x_value])) {",
"                $this-&gt;y_label = $this-&gt;y_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;y_label = $token_manager-&gt;getNextToken();",
"                }",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            }",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "295",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-13 04").format(timeFormat),
y: 20,
r: 3 + 298*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"                $this-&gt;x_label = $this-&gt;x_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;x_label = $token_manager-&gt;getNextToken();",
"                }",
"                }",
"                if (!isset($data[$line_value])) {",
"                if (!isset($data[$line_value][$x_value])) {",
"                $this-&gt;y_label = $this-&gt;y_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;y_label = $token_manager-&gt;getNextToken();",
"                }",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            }",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "298",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-14 12").format(timeFormat),
y: 20,
r: 3 + 301*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"                $this-&gt;x_label = $this-&gt;x_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;x_label = $token_manager-&gt;getNextToken();",
"                }",
"                }",
"                if (!isset($data[$line_value])) {",
"                if (!isset($data[$line_value][$x_value])) {",
"                $this-&gt;y_label = $this-&gt;y_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;y_label = $token_manager-&gt;getNextToken();",
"                }",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            }",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "301",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-14 04").format(timeFormat),
y: 20,
r: 3 + 304*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"                $this-&gt;x_label = $this-&gt;x_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;x_label = $token_manager-&gt;getNextToken();",
"                }",
"                }",
"                if (!isset($data[$line_value])) {",
"                if (!isset($data[$line_value][$x_value])) {",
"                $this-&gt;y_label = $this-&gt;y_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;y_label = $token_manager-&gt;getNextToken();",
"                }",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"                break;",
"            }",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "304",
fileName: "src/Entities/LineChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-14 04").format(timeFormat),
y: 20,
r: 3 + 314*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                }",
"",
"                if (!isset($data[$line_value][$x_value])) {",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"                $line_value = trim($row[$this-&gt;line]);",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"",
"                if (!isset($data[$line_value])) {",
"                    $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"                $this-&gt;x_label = $this-&gt;x_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;x_label = $token_manager-&gt;getNextToken();",
"                $this-&gt;x_label = $this-&gt;x_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;x_label = $token_manager-&gt;getNextToken();",
"                }",
"                }",
"                }",
"                if (!isset($data[$line_value])) {",
"                $this-&gt;y_label = $this-&gt;y_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;y_label = $token_manager-&gt;getNextToken();",
"                }",
"                if (!isset($data[$line_value][$x_value])) {",
"                $this-&gt;y_label = $this-&gt;y_axis;",
"                if ($token_manager-&gt;checkNextToken(self::ALIAS_TOKEN)) {",
"                    $token_manager-&gt;getNextToken();",
"                    $this-&gt;y_label = $token_manager-&gt;getNextToken();",
"                }",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                    $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"                break;",
"            }",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"            $line_value = trim($row[$this-&gt;line]);",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"            }",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"            $line_value = trim($row[$this-&gt;line]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"            if (!isset($data[$line_value])) {",
"                $data[$line_value][&#039;line_value&#039;] = $line_value;",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"",
"            if (!isset($data[$line_value][$x_value])) {",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;x_value&#039;] = $x_value;",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"                $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$line_value][&#039;x_values&#039;][$x_value][&#039;y_value&#039;] += doubleval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $d) {",
"            $line_value = $d[&#039;line_value&#039;];",
"            foreach ($data[$line_value][&#039;x_values&#039;] as $l ) {",
"                $x_value = $l[&#039;x_value&#039;];",
"                $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"",
"                $this-&gt;data[&#039;lines&#039;][$line_value] = $line_value;",
"                $this-&gt;data[&#039;y_values&#039;][$line_value][$x_value] = $l[&#039;y_value&#039;];",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
"            }",
"            $this-&gt;data[&#039;colours&#039;][$line_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        // COMMENT: order by y doesn&#039;t make much sense for line graphs",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortLinesByX();",
"        }",
"    }",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"            if ($this-&gt;passesFilter($row)) {",
],
size: "314",
fileName: "src/Entities/LineChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 21,
r: 3 + 23*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    public function addAttribute($token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::X_AXIS_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_AXIS_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;x_order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_ORDER_TOKEN:",
"                $this-&gt;y_order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "23",
fileName: "src/Entities/LineChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-01 07").format(timeFormat),
y: 21,
r: 3 + 23*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::X_AXIS_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_AXIS_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;x_order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_ORDER_TOKEN:",
"                $this-&gt;y_order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "23",
fileName: "src/Entities/LineChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-05 08").format(timeFormat),
y: 21,
r: 3 + 46*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            }",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"        }",
"",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"        }",
"    {",
"        switch ($token) {",
"            case self::X_AXIS_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_AXIS_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;x_order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_ORDER_TOKEN:",
"                $this-&gt;y_order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "46",
fileName: "src/Entities/LineChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-07 04").format(timeFormat),
y: 21,
r: 3 + 54*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            }",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"        }",
"",
"        if (isset($this-&gt;x_order)) {",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"        }",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sort() {",
"",
"    }",
"    {",
"        switch ($token) {",
"            case self::X_AXIS_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_AXIS_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;x_order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_ORDER_TOKEN:",
"                $this-&gt;y_order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "54",
fileName: "src/Entities/LineChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-07 06").format(timeFormat),
y: 21,
r: 3 + 57*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            }",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"        }",
"",
"        if (isset($this-&gt;x_order)) {",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"        }",
"",
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
"",
"    protected function sort() {",
"",
"    }",
"    {",
"        switch ($token) {",
"            case self::X_AXIS_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_AXIS_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;x_order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_ORDER_TOKEN:",
"                $this-&gt;y_order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "57",
fileName: "src/Entities/LineChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-07 07").format(timeFormat),
y: 21,
r: 3 + 76*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"        $data = [];",
"        foreach ($dataset as $row) {",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            }",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            case self::LINE_TOKEN:",
"                $this-&gt;line = $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"        }",
"",
"        if (isset($this-&gt;x_order)) {",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            $this-&gt;order = $this-&gt;x_order;",
"            $this-&gt;sortByX();",
"        } else if (isset($this-&gt;y_order)) {",
"            $this-&gt;order = $this-&gt;y_order;",
"            $this-&gt;sortByY();",
"        }",
"",
"    public function getData() {",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"",
"    protected function sort() {",
"",
"    }",
"    {",
"        switch ($token) {",
"            case self::X_AXIS_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_AXIS_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;x_order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_ORDER_TOKEN:",
"                $this-&gt;y_order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "76",
fileName: "src/Entities/LineChart.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-10-01 06").format(timeFormat),
y: 22,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    public function __construct()",
"    {",
"        $this-&gt;type = Node::TYPE_BAR_CHART;",
"    }",
],
size: "3",
fileName: "src/Entities/LineChart.php"
},
{
label: "getData",
data:
[{
x: moment("2018-10-07 04").format(timeFormat),
y: 23,
r: 3 + 2*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    public function getData() {",
"        return $this-&gt;data;",
"    }",
],
size: "2",
fileName: "src/Entities/LineChart.php"
},
{
label: "getData",
data:
[{
x: moment("2018-10-07 07").format(timeFormat),
y: 23,
r: 3 + 46*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    public function getData() {",
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"",
"    protected function sort() {",
"",
"    }",
"    {",
"        switch ($token) {",
"            case self::X_AXIS_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_AXIS_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;x_order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_ORDER_TOKEN:",
"                $this-&gt;y_order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
"        return $this-&gt;data;",
],
size: "46",
fileName: "src/Entities/LineChart.php"
},
{
label: "sort",
data:
[{
x: moment("2018-10-07 04").format(timeFormat),
y: 24,
r: 3 + 2*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    protected function sort() {",
"",
"    }",
],
size: "2",
fileName: "src/Entities/LineChart.php"
},
{
label: "sortLinesByX",
data:
[{
x: moment("2018-10-07 08").format(timeFormat),
y: 25,
r: 3 + 18*0.05
}],
fill:false,
borderColor:"rgb(146,229,83)",
backgroundColor:"rgba(146,229,83,0.4)",
body:
[
"    protected function sortLinesByX(){",
"        if ($this-&gt;order === Chart::DESCENDING_KEY) {",
"            krsort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;lines&#039;] as $line) {",
"                krsort($this-&gt;data[&#039;y_values&#039;][$line]);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                krsort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        } else {",
"            ksort($this-&gt;data[&#039;x_values&#039;]);",
"            foreach ($this-&gt;data[&#039;y_values&#039;] as $line) {",
"                ksort($line);",
"            }",
"            if(isset($this-&gt;data[&#039;colours&#039;])) {",
"                ksort($this-&gt;data[&#039;colours&#039;]);",
"            }",
"        }",
"    }",
],
size: "18",
fileName: "src/Entities/LineChart.php"
},
{
label: "parse",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 26,
r: 3 + 7*0.05
}],
fill:false,
borderColor:"rgb(124,163,193)",
backgroundColor:"rgba(124,163,193,0.4)",
body:
[
"    public function parse($token_manager) {",
"        while (!$token_manager-&gt;checkNextToken(&#039;End&#039;)) {",
"            $this-&gt;addAttribute($token_manager, $token_manager-&gt;getNextToken());",
"        }",
"",
"        // discard &#039;End&#039; token",
"        $token_manager-&gt;getNextToken();",
"    }",
],
size: "7",
fileName: "src/Entities/Node.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 27,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(71,60,27)",
backgroundColor:"rgba(71,60,27,0.4)",
body:
[
"    public function __construct($tokens)",
"    {",
"        $this-&gt;tokens = $tokens;",
"    }",
],
size: "3",
fileName: "src/Entities/TokenManager.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-10-12 11").format(timeFormat),
y: 27,
r: 3 + 4*0.05
}],
fill:false,
borderColor:"rgb(71,60,27)",
backgroundColor:"rgba(71,60,27,0.4)",
body:
[
"    public function __construct($tokens, SerializerInterface $serializer)",
"    {",
"        $this-&gt;tokens = $tokens;",
"        $this-&gt;serializer = $serializer;",
"    }",
],
size: "4",
fileName: "src/Entities/TokenManager.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-10-13 12").format(timeFormat),
y: 27,
r: 3 + 36*0.05
}],
fill:false,
borderColor:"rgb(71,60,27)",
backgroundColor:"rgba(71,60,27,0.4)",
body:
[
"    public function __construct($tokens, SerializerInterface $serializer)",
"        $this-&gt;serializer = $serializer;",
"    }",
"",
"    public function generateNodes() {",
"        $nodes = [];",
"        while ($this-&gt;hasNextToken()) {",
"",
"            $node = null;",
"            if ($this-&gt;getAndCheckNextToken(Node::NODE_START_TOKEN)) {",
"",
"                $next_token = $this-&gt;getNextToken();",
"                switch ($next_token) {",
"                    case &#039;Datasets&#039;:",
"                        $node = new Datasets($this-&gt;serializer);",
"                        break;",
"                    case &#039;Bar&#039;:",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                        break;",
"                    case &#039;Pie&#039;:",
"                        $node = new PieChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"                        break;",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($this);",
"",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;)&quot;);",
"            }",
"        }",
],
size: "36",
fileName: "src/Entities/TokenManager.php"
},
{
label: "getNextToken",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 28,
r: 3 + 2*0.05
}],
fill:false,
borderColor:"rgb(71,60,27)",
backgroundColor:"rgba(71,60,27,0.4)",
body:
[
"    public function getNextToken() {",
"        return array_shift($this-&gt;tokens);",
"    }",
],
size: "2",
fileName: "src/Entities/TokenManager.php"
},
{
label: "checkNextToken",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 29,
r: 3 + 2*0.05
}],
fill:false,
borderColor:"rgb(71,60,27)",
backgroundColor:"rgba(71,60,27,0.4)",
body:
[
"    public function checkNextToken($regex) {",
"        return (strpos($regex, reset($this-&gt;tokens)) !== false);",
"    }",
],
size: "2",
fileName: "src/Entities/TokenManager.php"
},
{
label: "getAndCheckNextToken",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 30,
r: 3 + 6*0.05
}],
fill:false,
borderColor:"rgb(71,60,27)",
backgroundColor:"rgba(71,60,27,0.4)",
body:
[
"    public function getAndCheckNextToken($regex) {",
"        if (!$this-&gt;checkNextToken($regex)) {",
"            throw new \Exception(&#039;Unexpected token&#039;);",
"        } else {",
"            return $this-&gt;getNextToken();",
"        }",
"    }",
],
size: "6",
fileName: "src/Entities/TokenManager.php"
},
{
label: "hasNextToken",
data:
[{
x: moment("2018-09-28 09").format(timeFormat),
y: 31,
r: 3 + 2*0.05
}],
fill:false,
borderColor:"rgb(71,60,27)",
backgroundColor:"rgba(71,60,27,0.4)",
body:
[
"    public function hasNextToken() {",
"        return !empty($this-&gt;tokens);",
"    }",
],
size: "2",
fileName: "src/Entities/TokenManager.php"
},
{
label: "generateNodes",
data:
[{
x: moment("2018-10-12 11").format(timeFormat),
y: 32,
r: 3 + 35*0.05
}],
fill:false,
borderColor:"rgb(71,60,27)",
backgroundColor:"rgba(71,60,27,0.4)",
body:
[
"    public function generateNodes() {",
"        $nodes = [];",
"        while ($this-&gt;hasNextToken()) {",
"",
"            $node = null;",
"            if ($this-&gt;getAndCheckNextToken(Node::NODE_START_TOKEN)) {",
"",
"                $next_token = $this-&gt;getNextToken();",
"                switch ($next_token) {",
"                    case &#039;Datasets&#039;:",
"                        $node = new Datasets($this-&gt;serializer);",
"                        break;",
"                    case &#039;Bar&#039;:",
"                        $node = new BarChart();",
"                        break;",
"                    case &#039;Line&#039;:",
"                        $node = new LineChart();",
"                        break;",
"                    case &#039;Pie&#039;:",
"                        $node = new PieChart();",
"                        break;",
"                    case &#039;Group&#039;:",
"                        $node = new ChartGroup();",
"                        break;",
"                }",
"",
"                $nodes[] = $node;",
"                $node-&gt;parse($this);",
"",
"            } else {",
"                throw new \Exception(&quot;Incorrectly formatted DSL (didn&#039;t start chart/group with &#039;Create&#039;)&quot;);",
"            }",
"        }",
"",
"        return $nodes;",
"    }",
],
size: "35",
fileName: "src/Entities/TokenManager.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-10-03 06").format(timeFormat),
y: 33,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function __construct()",
"    {",
"        $this-&gt;type = Node::TYPE_PIE_CHART;",
"    }",
],
size: "3",
fileName: "src/Entities/PieChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-03 06").format(timeFormat),
y: 34,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        // TODO: Implement evaluate() method.",
"    }",
],
size: "3",
fileName: "src/Entities/PieChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-03 06").format(timeFormat),
y: 34,
r: 3 + 25*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"",
"            $x_value = trim($row[$this-&gt;x_axis]);",
"            if (!isset($data[$x_value])) {",
"                $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                $data[$x_value][&#039;y_value&#039;] = 0;",
"            }",
"",
"            $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;data[&#039;colours&#039;][$x_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        if (isset($this-&gt;order)) {",
"            $this-&gt;sortByX();",
"        }",
"    }",
],
size: "25",
fileName: "src/Entities/PieChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-07 06").format(timeFormat),
y: 34,
r: 3 + 27*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            }",
"        }",
"",
"        $this-&gt;data[&#039;colours&#039;] = [];",
"        foreach ($data as $column) {",
"            $x_value = $column[&#039;x_value&#039;];",
"            $this-&gt;data[&#039;x_values&#039;][$x_value] = $x_value;",
"            $this-&gt;data[&#039;y_values&#039;][$x_value] = $column[&#039;y_value&#039;];",
"            $this-&gt;data[&#039;colours&#039;][$x_value] = $this-&gt;getNewColour($this-&gt;data[&#039;colours&#039;]);",
"        }",
"",
"        if (isset($this-&gt;order)) {",
"            $this-&gt;sortByX();",
"        }",
"    }",
],
size: "27",
fileName: "src/Entities/PieChart.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-10 06").format(timeFormat),
y: 34,
r: 3 + 16*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $data = [];",
"        foreach ($dataset as $row) {",
"            if ($this-&gt;passesFilter($row)) {",
"            if ($this-&gt;passesFilter($row)) {",
"                $x_value = trim($row[$this-&gt;x_axis]);",
"                if (!isset($data[$x_value])) {",
"                    $data[$x_value][&#039;x_value&#039;] = $x_value;",
"                    $data[$x_value][&#039;y_value&#039;] = 0;",
"                }",
"                }",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            }",
"                $data[$x_value][&#039;y_value&#039;] += intval($row[$this-&gt;y_axis]);",
"            }",
"        }",
],
size: "16",
fileName: "src/Entities/PieChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-03 06").format(timeFormat),
y: 35,
r: 3 + 20*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::X_AXIS_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::Y_AXIS_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::X_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "20",
fileName: "src/Entities/PieChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-07 04").format(timeFormat),
y: 35,
r: 3 + 20*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::CATEGORY_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::VALUE_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "20",
fileName: "src/Entities/PieChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-07 06").format(timeFormat),
y: 35,
r: 3 + 23*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::CATEGORY_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::VALUE_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "23",
fileName: "src/Entities/PieChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-09 07").format(timeFormat),
y: 35,
r: 3 + 26*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::VALUE_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "26",
fileName: "src/Entities/PieChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-10 06").format(timeFormat),
y: 35,
r: 3 + 29*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::VALUE_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "29",
fileName: "src/Entities/PieChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-10 06").format(timeFormat),
y: 35,
r: 3 + 32*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"    {",
"        switch ($token) {",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::VALUE_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "32",
fileName: "src/Entities/PieChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-12 05").format(timeFormat),
y: 35,
r: 3 + 35*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"    {",
"        switch ($token) {",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::VALUE_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "35",
fileName: "src/Entities/PieChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-13 04").format(timeFormat),
y: 35,
r: 3 + 38*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"    {",
"        switch ($token) {",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::VALUE_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "38",
fileName: "src/Entities/PieChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-14 12").format(timeFormat),
y: 35,
r: 3 + 41*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"    {",
"        switch ($token) {",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::VALUE_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "41",
fileName: "src/Entities/PieChart.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-14 04").format(timeFormat),
y: 35,
r: 3 + 44*0.05
}],
fill:false,
borderColor:"rgb(158,149,181)",
backgroundColor:"rgba(158,149,181,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"    {",
"        switch ($token) {",
"            case self::DATASET_TOKEN:",
"                $this-&gt;dataset_id = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_TOKEN:",
"                $this-&gt;x_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::VALUE_TOKEN:",
"                $this-&gt;y_axis = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::TITLE_TOKEN:",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::SCALE_KEY:",
"                $this-&gt;scale_by = $token_manager-&gt;getNextToken();",
"                break;",
"                $this-&gt;title = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::CATEGORY_ORDER_TOKEN:",
"                $this-&gt;order = $token_manager-&gt;getNextToken();",
"                break;",
"            case self::ONLY_USE_TOKEN:",
"                $this-&gt;separateFilter($token_manager);",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "44",
fileName: "src/Entities/PieChart.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-10-09 08").format(timeFormat),
y: 36,
r: 3 + 5*0.05
}],
fill:false,
borderColor:"rgb(92,170,214)",
backgroundColor:"rgba(92,170,214,0.4)",
body:
[
"    public function __construct(SerializerInterface $serializer)",
"    {",
"        $this-&gt;input_path = str_replace(&#039;Entities&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"        $this-&gt;type = Node::TYPE_DATASET;",
"        $this-&gt;serializer = $serializer;",
"    }",
],
size: "5",
fileName: "src/Entities/Datasets.php"
},
{
label: "addAttribute",
data:
[{
x: moment("2018-10-09 08").format(timeFormat),
y: 37,
r: 3 + 11*0.05
}],
fill:false,
borderColor:"rgb(92,170,214)",
backgroundColor:"rgba(92,170,214,0.4)",
body:
[
"    public function addAttribute(TokenManager $token_manager, $token)",
"    {",
"        switch ($token) {",
"            case self::ADD_ITEM_TOKEN:",
"                $this-&gt;datasets[] = $token_manager-&gt;getNextToken();",
"                break;",
"            default:",
"                // discard value for unsupported attribute",
"                $token_manager-&gt;getNextToken();",
"                break;",
"        }",
"    }",
],
size: "11",
fileName: "src/Entities/Datasets.php"
},
{
label: "evaluate",
data:
[{
x: moment("2018-10-09 08").format(timeFormat),
y: 38,
r: 3 + 9*0.05
}],
fill:false,
borderColor:"rgb(92,170,214)",
backgroundColor:"rgba(92,170,214,0.4)",
body:
[
"    public function evaluate($dataset)",
"    {",
"        $available_datasets = [];",
"        foreach ($this-&gt;datasets as $dataset_name) {",
"            $dataset_path = $this-&gt;input_path . $dataset_name . &#039;.csv&#039;;",
"",
"            $available_datasets[$dataset_name] = $this-&gt;serializer-&gt;decode(file_get_contents($dataset_path), &#039;csv&#039;);",
"        }",
"        return $available_datasets;",
"    }",
],
size: "9",
fileName: "src/Entities/Datasets.php"
},
{
label: "__construct",
data:
[{
x: moment("2018-10-12 11").format(timeFormat),
y: 39,
r: 3 + 3*0.05
}],
fill:false,
borderColor:"rgb(126,194,206)",
backgroundColor:"rgba(126,194,206,0.4)",
body:
[
"    public function __construct()",
"    {",
"        $this-&gt;input_path = str_replace(&#039;Services&#039;, &#039;&#039;, __DIR__ ) . &quot;Input/&quot;;",
"    }",
],
size: "3",
fileName: "src/Services/RequestHandler.php"
},
{
label: "handleHomeRequest",
data:
[{
x: moment("2018-10-12 11").format(timeFormat),
y: 40,
r: 3 + 15*0.05
}],
fill:false,
borderColor:"rgb(126,194,206)",
backgroundColor:"rgba(126,194,206,0.4)",
body:
[
"    public function handleHomeRequest(Request $request) {",
"        $remove_datasets = $request-&gt;query-&gt;get(&#039;remove_datasets&#039;);",
"        if (isset($remove_datasets)) {",
"            $this-&gt;removeDatasets($remove_datasets);",
"        }",
"",
"        $add_dataset = $request-&gt;files-&gt;get(&#039;add_dataset&#039;);",
"        if (isset($add_dataset)) {",
"            $this-&gt;addDataset($add_dataset);",
"        }",
"",
"        $new_program = $request-&gt;files-&gt;get(&#039;new_program&#039;);",
"        if (isset($new_program)) {",
"            $this-&gt;changeProgram($new_program);",
"        }",
"    }",
],
size: "15",
fileName: "src/Services/RequestHandler.php"
},
{
label: "removeDatasets",
data:
[{
x: moment("2018-10-12 11").format(timeFormat),
y: 41,
r: 3 + 7*0.05
}],
fill:false,
borderColor:"rgb(126,194,206)",
backgroundColor:"rgba(126,194,206,0.4)",
body:
[
"    private function removeDatasets($datasets) {",
"        $filesystem = new Filesystem();",
"",
"        foreach ($datasets as $dataset) {",
"            $dataset_path = $this-&gt;input_path . $dataset;",
"            $filesystem-&gt;remove($dataset_path);",
"        }",
"    }",
],
size: "7",
fileName: "src/Services/RequestHandler.php"
},
{
label: "addDataset",
data:
[{
x: moment("2018-10-12 11").format(timeFormat),
y: 42,
r: 3 + 2*0.05
}],
fill:false,
borderColor:"rgb(126,194,206)",
backgroundColor:"rgba(126,194,206,0.4)",
body:
[
"    private function addDataset(UploadedFile $dataset) {",
"        $dataset-&gt;move($this-&gt;input_path, $dataset-&gt;getClientOriginalName());",
"    }",
],
size: "2",
fileName: "src/Services/RequestHandler.php"
},
{
label: "changeProgram",
data:
[{
x: moment("2018-10-12 11").format(timeFormat),
y: 43,
r: 3 + 5*0.05
}],
fill:false,
borderColor:"rgb(126,194,206)",
backgroundColor:"rgba(126,194,206,0.4)",
body:
[
"    private function changeProgram(UploadedFile $new_dsl) {",
"        $filesystem = new Filesystem();",
"",
"        $filesystem-&gt;remove($this-&gt;input_path . &#039;input.txt&#039;);",
"        $new_dsl-&gt;move($this-&gt;input_path, &#039;input.txt&#039;);",
"    }",
],
size: "5",
fileName: "src/Services/RequestHandler.php"
},
]
},
options: {
title: {
display: true,
text: "Function Lifespan"
},
scales: {
yAxes: [
{
scaleLabel: {
display: true,
labelString: "Functions",
fontSize: 18

},

ticks: {
min: 0,
max: 44,
stepSize: 1,
fontSize:10,
callback: function(label, index, labels) {
var functions = [
"BaseController.php/renderHomepage",
"BaseController.php/generateNodes",
"BaseController.php/separateChartsAndGroups",
"BaseController.php/renderCharts",
"Kernel.php/getCacheDir",
"Kernel.php/getLogDir",
"Kernel.php/registerBundles",
"Kernel.php/configureContainer",
"Kernel.php/configureRoutes",
"Tokenizer.php/generateTokens",
"Tokenizer.php/generateAST",
"Tokenizer.php/generateSubStatementTokens",
"Tokenizer.php/separateLiteral",
"BarChart.php/evaluate",
"BarChart.php/addAttribute",
"BarChart.php/__construct",
"ChartGroup.php/evaluate",
"ChartGroup.php/addAttribute",
"ChartGroup.php/__construct",
"LineChart.php/evaluate",
"LineChart.php/addAttribute",
"LineChart.php/__construct",
"LineChart.php/getData",
"LineChart.php/sort",
"LineChart.php/sortLinesByX",
"Node.php/parse",
"TokenManager.php/__construct",
"TokenManager.php/getNextToken",
"TokenManager.php/checkNextToken",
"TokenManager.php/getAndCheckNextToken",
"TokenManager.php/hasNextToken",
"TokenManager.php/generateNodes",
"PieChart.php/__construct",
"PieChart.php/evaluate",
"PieChart.php/addAttribute",
"Datasets.php/__construct",
"Datasets.php/addAttribute",
"Datasets.php/evaluate",
"RequestHandler.php/__construct",
"RequestHandler.php/handleHomeRequest",
"RequestHandler.php/removeDatasets",
"RequestHandler.php/addDataset",
"RequestHandler.php/changeProgram",
];
if (label == 0) {
return ""
}
return functions[label-1]
}
}
}],
xAxes: [{
type: 'time',
time: {
format: timeFormat,
unit: 'day',
// max: moment("2018-10-18").format(timeFormat)
},
scaleLabel: {
display: true,
labelString: "Time",
fontSize: 18
},
gridLines: {
display: false
}
}]
},
legend: {
display: false
},
tooltips: {
callbacks: {
beforeLabel: function(tooltipItem, data) {
return data.datasets[tooltipItem.datasetIndex].label + "( )";
},
label: function(tooltipItem, data) {
return "Parent file: " + data.datasets[tooltipItem.datasetIndex].fileName;
},
afterLabel: function(tooltipItem, data) {
var lines = data.datasets[tooltipItem.datasetIndex].size;
if (lines === '0') {
return "DELETED"
} else {
var label = [];
// label.push("# of lines: " + data['files'][tooltipItem['datasetIndex']].split("-")[2]);
return lines;

}
}
},
backgroundColor: 'rgba(240,248,255, 0.9)',
bodyFontColor: '#586062',
bodyFontSize: 14,
displayColors: false
},
legendCallback: function(chart) {
var backgroundColours = [
"rgba(52,151,20,0.4)",
"rgba(109,83,205,0.4)",
"rgba(142,232,55,0.4)",
"rgba(215,115,91,0.4)",
"rgba(237,244,112,0.4)",
"rgba(94,198,249,0.4)",
"rgba(146,229,83,0.4)",
"rgba(124,163,193,0.4)",
"rgba(71,60,27,0.4)",
"rgba(158,149,181,0.4)",
"rgba(92,170,214,0.4)",
"rgba(126,194,206,0.4)",
];

var borderColours = [
"rgb(52,151,20)",
"rgb(109,83,205)",
"rgb(142,232,55)",
"rgb(215,115,91)",
"rgb(237,244,112)",
"rgb(94,198,249)",
"rgb(146,229,83)",
"rgb(124,163,193)",
"rgb(71,60,27)",
"rgb(158,149,181)",
"rgb(92,170,214)",
"rgb(126,194,206)",
];

var files = [
"src/Controller/BaseController.php",
"src/Kernel.php",
"src/Services/Tokenizer.php",
"src/Entities/BarChart.php",
"src/Entities/Chart.php",
"src/Entities/ChartGroup.php",
"src/Entities/LineChart.php",
"src/Entities/Node.php",
"src/Entities/TokenManager.php",
"src/Entities/PieChart.php",
"src/Entities/Datasets.php",
"src/Services/RequestHandler.php",
];

var text = [];
for (var i=0; i<files.length; i++) {
text.push('<span style="background-color: '+backgroundColours[i]+'; border: 2px solid '+ borderColours[i] +';"></span>');
text.push('<sub>' + files[i] + '</sub>');
}
return text.join("");
}


}
});
